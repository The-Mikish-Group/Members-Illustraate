@page
@model Members.Areas.Admin.Pages.Reporting.UserAccountStatementReportModel
@{
    ViewData["Title"] = "Member Account Statement";
    Layout = "/Views/Shared/_Layout.cshtml";
}

<!-- Top Button placed here -->
<button onclick="topFunction()" id="top-button" title="Go to top">Top</button>

<!-- Container -->
<div class="my-4 px-1">

    <!-- Title -->
    <div class="text-center">
        <h2 class="text-black">@ViewData["Title"]</h2>
    </div>

    <!-- Buttons Form -->
    <form method="get" class="mb-3">
        <div class="row align-items-end gx-2 gy-3 mx-0 p-0">

            <!-- Select Member -->
            <div class="row align-items-end gy-2 m-0 p-0">
                <div class="col-md-4 p-0">
                    <label for="SelectedUserId" class="ms-2 mb-0 form-label">Member:</label>
                    <select asp-for="SelectedUserId" name="SelectedUserId" id="SelectedUserId" class="form-select shadow">
                        <option value="">-- Select a Member --</option>
                        @if (Model.UserSelectList != null && Model.UserSelectList.Any())
                        {
                            foreach (var item in Model.UserSelectList)
                            {
                                // Check if the current item should be selected
                                var selectedAttribute = (item.Value == Model.SelectedUserId) ? "selected" : null;
                                if (selectedAttribute != null)
                                {
                                    <option value="@item.Value" selected>@item.Text</option>
                                }
                                else
                                {
                                    <option value="@item.Value">@item.Text</option>
                                }
                            }
                        }
                        else
                        {
                            <option value="" disabled>!! Model.UserSelectList was null or empty in View !!</option>
                        }
                    </select>
                </div>
            </div>

            <!-- Start Date -->
            <div class="col-md-3 px-0 me-2">
                <label for="StartDate" class="ms-2 mb-0 form-label">Start Date:</label>
                <input asp-for="StartDate" type="date" class="form-control shadow" id="StartDate" name="StartDate" value="@Model.StartDate.ToString("yyyy-MM-dd")" />
            </div>

            <!-- End Date -->
            <div class="col-md-3 px-0 me-2">
                <label for="EndDate" class="ms-2 mb-0 form-label">End Date:</label>
                <input asp-for="EndDate" type="date" class="form-control shadow" id="EndDate" name="EndDate" value="@Model.EndDate.ToString("yyyy-MM-dd")" />
            </div>

            <!-- Run Report Button -->
            <div class="col-md-auto px-0">
                <button type="submit" class="btn btn-success rounded-2 ms-2 px-2 shadow"><i class="bi bi-funnel-fill"></i> Run Report</button>
            </div>

            @if (Model.StatementData != null && Model.StatementData.Transactions.Any())
            {
                <!-- Export to CSV Button (Only show if there is report data) -->
                <div class="col-md-auto px-0">
                    <button type="button" class="btn btn-success rounded-2 ms-2 px-2 shadow"
                            data-bs-toggle="modal" data-bs-target="#exportStatementConfirmModal">
                        <i class="bi bi-file-earmark-spreadsheet-fill"></i> Export to CSV
                    </button>
                </div>

                <!-- Print Button (Only show if there is report data) -->
                <div class="col-md-auto px-0">
                    <button type="button" class="btn btn-success rounded-2 ms-2 px-2 shadow" id="printReportButton">
                        <i class="bi bi-printer-fill"></i> Print
                    </button>
                </div>
            }
        </div>
    </form>

    <!-- Export Confirmation Modal -->
    <div class="modal fade" id="exportStatementConfirmModal" tabindex="-1" aria-labelledby="exportStatementConfirmModalLabel" aria-hidden="true">
        <div class="modal-dialog">

            <!-- Modal Content -->
            <div class="modal-content bg-Card-Modal">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h5 class="modal-title" id="exportStatementConfirmModalLabel">Confirm Export</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <!-- Modal Body -->
                <div class="modal-body">
                    Are you sure you want to export the Account Statement to CSV?
                    It will be for member: <strong>@Model.StatementData?.SelectedUserName</strong> <br/>
                    For the period:
                    <strong>@Model.StartDate.ToString("yyyy-MM-dd")</strong> to <strong>@Model.EndDate.ToString("yyyy-MM-dd")</strong>.
                </div>

                <!-- Modal Footer (Buttons) -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary rounded-2 shadow" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="confirmExportStatementBtn rounded-2" class="btn btn-success shadow"><i class="bi bi-file-earmark-spreadsheet-fill"></i> Confirm Export</button>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.SelectedUserId) && Model.StatementData != null)
    {
        <div class="card mb-4 shadow print-table-header-bg">
            <div class="card-header print-table-header-bg">
                Statement for: <strong>@Model.StatementData.SelectedUserName</strong> <br />
                Period: @Model.StatementData.ReportStartDate.ToString("yyyy-MM-dd") to @Model.StatementData.ReportEndDate.ToString("yyyy-MM-dd")
            </div>
            
            <div class="table-responsive">
                    <table class="table-striped table-hover table">
                        <thead class="bg-white text-black">
                            <tr>
                                <th colspan="4">Opening Balance:</th>
                                <th class="text-end" colspan="3">@Model.StatementData.OpeningBalance.ToString("C")</th>
                            </tr>
                            <tr class="bg-whiite text-black">
                                <th>Date</th>
                                <th>Type</th>
                                <th>Reference</th>
                                <th>Description</th>
                                <th class="text-end">Debit</th>
                                <th class="text-end">Credit</th>
                                <th class="text-end">Balance</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (!Model.StatementData.Transactions.Any())
                            {
                                <tr>
                                    <td colspan="7" class="fst-italic py-3 text-center">No transactions found for this period.</td>
                                </tr>
                            }
                            @foreach (var item in Model.StatementData.Transactions)
                            {
                                <tr>
                                    <td>@item.TransactionDate.ToString("yyyy-MM-dd")</td>
                                    <td>@Html.DisplayFor(modelItem => item.TransactionType)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Reference)</td>
                                    <td style="min-width: 485px;" class="text-wrap">@Html.DisplayFor(modelItem => item.Description)</td>
                                    <td class="text-end">@(item.DebitAmount?.ToString("C"))</td>
                                    <td class="text-end">@(item.CreditAmount?.ToString("C"))</td>
                                    <td class="text-end">@item.RunningBalance.ToString("C")</td>
                                </tr>
                            }
                        </tbody>
                        <tfoot class="fw-bold bg-white">
                            <tr>
                                <th colspan="4" class="border-top-2 text-end">Closing Balance:</th>
                                <th class="border-top-2 text-end" colspan="3">@Model.StatementData.ClosingBalance.ToString("C")</th>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            
        </div>
    }
    else if (string.IsNullOrEmpty(Model.SelectedUserId) && (Request.Query.ContainsKey("StartDate") || Request.Query.ContainsKey("SelectedUserId")) && (Model.UserSelectList != null && !Model.UserSelectList.Any(x=>x.Selected))) // Added null check for UserSelectList
    {
         <div class="alert alert-warning shadow" role="alert">
            Please select a member to generate a statement.
        </div>
    }
    else if (!string.IsNullOrEmpty(Model.SelectedUserId) && Model.StatementData != null && !Model.StatementData.Transactions.Any() && (Request.Query.ContainsKey("StartDate") || Request.Query.ContainsKey("SelectedUserId"))) // A user is selected, data generated, but no transactions
    {
        <div class="alert alert-info shadow" role="alert">
             No statement data found for member <strong>@(Model.UserSelectList?.FirstOrDefault(u => u.Value == Model.SelectedUserId)?.Text ?? Model.SelectedUserId)</strong>
             for period @Model.StartDate.ToString("yyyy-MM-dd") to @Model.EndDate.ToString("yyyy-MM-dd").
             (Opening Balance: @Model.StatementData.OpeningBalance.ToString("C"), Closing Balance: @Model.StatementData.ClosingBalance.ToString("C"))
        </div>
    }
    else // Initial load, no user selected yet, or other general prompt
    {
        <div class="alert alert-info shadow" role="alert">
            Please select a member and date range, then run the statement.
        </div>
    }
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/js/site.js" asp-append-version="true"></script>

    <script>
        // Initialize Select2 if you are using it for user selection
        // $(document).ready(function() {
        //     $('#SelectedUserId').select2({ // Assuming your select has id="SelectedUserId"
        //         placeholder: "-- Select a User --",
        //         allowClear: true,
        //         theme: "bootstrap-5" // If using a bootstrap theme for select2
        //     });
        // });
    </script>

    <!-- Export to CSV Button Script -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var exportButton = document.getElementById('confirmExportStatementBtn');
            if (exportButton) {
                exportButton.addEventListener('click', function() {
                    var currentPagePath = window.location.pathname;
                    var handlerQuery = 'handler=ExportToCsv';
                    var baseUrl = currentPagePath + '?' + handlerQuery;

                    var userIdValue = '@Model.SelectedUserId';
                    var startDateValue = '@Model.StartDate.ToString("yyyy-MM-dd")';
                    var endDateValue = '@Model.EndDate.ToString("yyyy-MM-dd")';

                    var targetUrl = baseUrl +
                                    '&SelectedUserId=' + encodeURIComponent(userIdValue) +
                                    '&StartDate=' + encodeURIComponent(startDateValue) +
                                    '&EndDate=' + encodeURIComponent(endDateValue);

                    console.log('JS Export (UserAccountStatement): Navigating to URL: ' + targetUrl);
                    window.location.href = targetUrl;

                    setTimeout(function() {
                        var modalElement = document.getElementById('exportStatementConfirmModal');
                        if (modalElement) {
                            var modalInstance = bootstrap.Modal.getInstance(modalElement);
                            if (modalInstance) {
                                modalInstance.hide();
                            }
                        }
                    }, 500); // 500ms delay
                });
            }
        });
    </script>

    <!-- Print Button Script -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var printButton = document.getElementById('printReportButton');
            if (printButton) {
                printButton.addEventListener('click', function () {
                    window.print();
                });
            }
        });
    </script>

    <!-- Top Button Script -->
    <script>

        //Get the button
        var mybutton = document.getElementById("top-button");

        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function () { scrollFunction() };

        function scrollFunction() {
            if (document.body.scrollTop > 320 || document.documentElement.scrollTop > 320) {
                mybutton.style.display = "block";
            } else {
                mybutton.style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }

    </script>
}
