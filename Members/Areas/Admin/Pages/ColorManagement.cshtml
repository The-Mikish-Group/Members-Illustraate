@page
@model Members.Areas.Admin.Pages.ColorManagementModel
@{
    ViewData["Title"] = "Color Management";
    Layout = "/Views/Shared/_Layout.cshtml";
}

<!-- Top Button placed here -->
<button onclick="topFunction()" id="top-button" title="Go to top">Top</button>

<h2 class="text-black my-4 text-center"><i class="bi bi-palette-fill"></i> @ViewData["Title"]</h2>

<!-- Action Buttons -->
<div class="text-center mb-4">
    <button type="button" class="btn btn-sm btn-info rounded-2 shadow mb-2 me-2" data-bs-toggle="modal" data-bs-target="#importModal">
        <i class="bi bi-box-arrow-down"></i> Import Colors
    </button>
    <a href="@Url.Page("ColorManagement", "ExportCsv")" class="btn btn-sm btn-primary rounded-2 shadow mb-2 me-2">
        <i class="bi bi-box-arrow-up"></i> Export Colors
    </a>
    <button type="submit" form="colorForm" class="btn btn-sm btn-success rounded-2 mb-2 shadow">
        <i class="bi bi-save"></i> Update Colors
    </button>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["WarningMessage"] != null)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        @TempData["WarningMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="card m-1 p-2 shadow mb-4">
    <form method="post" id="colorForm">
        @Html.AntiForgeryToken()
        <div class="row">
            @if (Model.ColorVars != null)
            {
                @foreach (var color in Model.ColorVars)
                {
                    <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12">
                        <div class="form-group mb-3 px-2">
                            <label class="form-label" data-original-name="@color.Name">@color.Name - @color.Value</label>
                            <div class="pickr-container" style="width: 100%;">
                                <input type="hidden" name="colors[@color.Name]" value="@color.Value" class="color-input" />
                                <div class="pickr-element"
                                     data-color="@color.Value"
                                     style="width: 100%; height: 60px; border: 2px solid #ddd; border-radius: 5px; background-color: @color.Value; cursor: pointer; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; font-size: 12px; text-shadow: 1px 1px 2px rgba(0,0,0,0.7);">
                                    @color.Value
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </form>
</div>

<!-- Import Modal -->
<div class="modal fade" id="importModal" tabindex="-1" aria-labelledby="importModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="importModalLabel">Import Colors</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post" enctype="multipart/form-data" action="/Admin/ColorManagement?handler=Import">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="csvFile" class="form-label">Select CSV File</label>
                        <input class="form-control" type="file" id="csvFile" name="csvFile" accept=".csv" required>
                        <div class="form-text">
                            CSV format: Name,Value (e.g., "--primary-color",#FF0000)
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary shadow" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary shadow" id="importButton">
                        <i class="bi bi-upload"></i> Import
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Pickr Color Picker -->
    <script src="https://cdn.jsdelivr.net/npm/@@simonwep/pickr/dist/pickr.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@@simonwep/pickr/dist/themes/classic.min.css">

    <style>
        .pickr-element-full,
        .pickr button {
            width: 100% !important; 
            padding: 3px;
            margin: 3px;
            box-sizing: border-box !important;
            border: 1px solid darkgray !important;
        }

            .pickr-element-full:hover,
            .pickr button:hover {
                border: 2px solid black !important;
                transform: translateY(-1px);
                box-shadow: 0 4px 8px gray !important;
            }
    </style>

    <script>
        console.log('Clean Pickr - No Button Styling');

        document.addEventListener('DOMContentLoaded', function() {
            const pickrElements = document.querySelectorAll('.pickr-element');
            console.log('Found', pickrElements.length, 'pickr elements');

            pickrElements.forEach(function(element) {
                const colorValue = element.dataset.color;
                const hiddenInput = element.parentElement.querySelector('.color-input');

                const pickr = Pickr.create({
                    el: element,
                    theme: 'classic',
                    default: colorValue,

                    swatches: [
                        '#ffffff', '#f8f9fa', '#e9ecef', '#dee2e6', '#ced4da', '#adb5bd', '#6c757d', '#495057', '#343a40', '#212529',
                        '#007bff', '#0056b3', '#004085', '#28a745', '#1e7e34', '#155724', '#dc3545', '#c82333', '#bd2130',
                        '#ffc107', '#e0a800', '#d39e00', '#17a2b8', '#138496', '#117a8b', '#6f42c1', '#59359a', '#4c2a85'
                    ],

                    components: {
                        preview: true,
                        opacity: false,
                        hue: true,

                        interaction: {
                            hex: true,
                            rgba: true,
                            hsla: true,
                            hsva: true,
                            cmyk: true,
                            input: true,
                            clear: false,
                            save: true
                        }
                    }
                });

                pickr.on('change', (color) => {
                    const hexColor = color.toHEXA().toString();
                    hiddenInput.value = hexColor;
                    element.style.backgroundColor = hexColor;
                    element.textContent = hexColor;
                });

                pickr.on('save', (color) => {
                    const hexColor = color.toHEXA().toString();
                    hiddenInput.value = hexColor;
                    element.style.backgroundColor = hexColor;
                    element.textContent = hexColor;
                    pickr.hide();
                });
            });

            // Apply full-width styling with CSS class after Pickr initialization
            setTimeout(() => {
                pickrElements.forEach(function(element) {
                    element.classList.add('pickr-element-full');
                });
            }, 200);
        });

        // File validation
        document.getElementById('csvFile').addEventListener('change', function() {
            const file = this.files[0];
            const importButton = document.getElementById('importButton');

            if (file && file.name.endsWith('.csv')) {
                importButton.disabled = false;
            } else {
                importButton.disabled = true;
            }
        });
    </script>

    <!-- Top Button Script -->
    <script>

        //Get the button
        var mybutton = document.getElementById("top-button");

        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function () { scrollFunction() };

        function scrollFunction() {
            if (document.body.scrollTop > 320 || document.documentElement.scrollTop > 320) {
                mybutton.style.display = "block";
            } else {
                mybutton.style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }

    </script>
}