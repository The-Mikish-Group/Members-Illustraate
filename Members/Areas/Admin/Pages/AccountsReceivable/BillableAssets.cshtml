@page
@model Members.Areas.Admin.Pages.AccountsReceivable.BillableAssetsModel
@{
    ViewData["Title"] = "Manage Billable Assets";
    Layout = "/Views/Shared/_Layout.cshtml";
}

<!-- Title -->
<h2 class="text-black my-4 text-center"><i class="bi bi-house"></i> @ViewData["Title"]</h2>

<!-- Error Status Messages --> 
@if (TempData["StatusMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @Html.Raw(TempData["StatusMessage"]?.ToString())
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @Html.Raw(TempData["ErrorMessage"]?.ToString())
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}


<!-- Add A New Billable Asset Button -->
<div class="text-center">
    <button type="button" class="btn btn-sm btn-success rounded-2 mb-4 ms-2 shadow" data-bs-toggle="modal" data-bs-target="#addAssetModal"><i class="bi bi-plus-square"></i> Add A New Billable Asset</button>
</div>

<!-- Filter Assets Card -->
<div class="mb-4">
    <div class="card m-1 p-2 shadow">

        <h5 class="text-black my-2 ms-2"><i class="bi bi-filter"></i> Filter Assets</h5>

        <form method="get" id="filterAssetsForm">

            <div class="input-group mb-2">
                <input type="text" class="form-control shadow-sm" placeholder="Search by Plot ID, Description, Contact Name/Email..." asp-for="SearchTerm" id="assetsSearchInput" />
                <button class="btn btn-sm btn-outline-secondary bg-success-subtle" type="button" id="clearAssetsSearch" style="display: none;">
                    <i class="bi bi-x text-black"></i>
                </button>
                <button class="btn btn-sm" type="submit" id="assetsSearchButton"><i class="bi bi-search"></i></button>
            </div>
            <input type="hidden" asp-for="PageNumber" />
            <input type="hidden" asp-for="PageSize" />
            <input type="hidden" asp-for="CurrentSort" />
        </form>

        <div class="mt-1 ps-1">
            <span id="assetCountSpan" class="text-black">Total Assets: @Model.TotalAssets</span>
        </div>

    </div>
</div>

<!-- Export and Table Card -->
<div class="card mx-1 mb-4 mt-1 p-1 shadow">

    <!-- Export Button -->
    <div class="d-flex justify-content-between align-items-center mb-0 ms-2">
        <h5 class="text-black my-2"><i class="bi bi-list"></i> Existing Assets</h5>
        <button type="button" class="btn btn-sm btn-success rounded-2 my-2 me-2 shadow" id="exportBillableAssetsTriggerButton"
                data-bs-toggle="modal" data-bs-target="#exportBillableAssetsConfirmModal">
            <i class="bi bi-file-earmark-spreadsheet-fill"></i> Export to CSV
        </button>
    </div>

    <!-- Table -->
    <div class="table-responsive">
        <table class="w-100 mb-0" id="mainAssetsTable">
            <thead>
                <tr>

                    <!-- Contact -->
                    <th>
                        <a class="asset-sort-link text-decoration-none text-nowrap" href="#" data-column-key="contact" data-sort-value="contact">Assigned Billing Contact</a>
                        @if (Model.CurrentSort == "contact_asc")
                        {
                            <i class="bi bi-arrow-down ms-1"></i>
                        }
                        else if (Model.CurrentSort == "contact_desc")
                        {

                            <i class="bi bi-arrow-up ms-1"></i>
                        }
                    </th>

                    <!-- Plot ID-->
                    <th class="text-nowrap text-start">
                        <a class="asset-sort-link text-decoration-none text-nowrap" href="#" data-column-key="plotid" data-sort-value="Asset Identifier">Asset Identifier</a>
                        @if (Model.CurrentSort == "plotid_asc")
                        {
                            <i class="bi bi-arrow-down ms-1"></i>
                        }
                        else if (Model.CurrentSort == "plotid_desc")
                        {

                            <i class="bi bi-arrow-up ms-1"></i>
                        }
                    </th>

                    <!-- Assessment Fee -->
                    <th class="text-nowrap text-end">
                        <a class="asset-sort-link text-decoration-none text-nowrap" href="#" data-column-key="fee" data-sort-value="fee">Assessment Fee</a>
                        @if (Model.CurrentSort == "fee_asc")
                        {
                            <i class="bi bi-arrow-down ms-1"></i>
                        }
                        else if (Model.CurrentSort == "fee_desc")
                        {

                            <i class="bi bi-arrow-up ms-1"></i>
                        }
                    </th>
                    
                    <!-- Description -->
                    <th>
                        <a class="asset-sort-link text-decoration-none text-nowrap" href="#" data-column-key="desc" data-sort-value="desc">Description</a>
                        @if (Model.CurrentSort == "desc_asc")
                        {
                            <i class="bi bi-arrow-down ms-1"></i>
                        }
                        else if (Model.CurrentSort == "desc_desc")
                        {

                            <i class="bi bi-arrow-up ms-1"></i>
                        }
                    </th>

                    <!-- Created -->
                    <th>
                        <a class="asset-sort-link text-decoration-none text-nowrap" href="#" data-column-key="created" data-sort-value="created">Date Created</a>
                        @if (Model.CurrentSort == "created_asc")
                        {
                            <i class="bi bi-arrow-down ms-1"></i>
                        }
                        else if (Model.CurrentSort == "created_desc")
                        {

                            <i class="bi bi-arrow-up ms-1"></i>
                        }
                    </th>

                    <!-- Last Updated -->
                    <th>
                        <a class="asset-sort-link text-decoration-none text-nowrap" href="#" data-column-key="updated" data-sort-value="updated">Last Updated</a>
                        @if (Model.CurrentSort == "updated_asc")
                        {
                            <i class="bi bi-arrow-down ms-1"></i>
                        }
                        else if (Model.CurrentSort == "updated_desc")
                        {

                            <i class="bi bi-arrow-up ms-1"></i>
                        }
                    </th>

                    <!-- Billing -->
                    <th class="text-nowrap pe-2 text-center">Billing</th>

                    <!-- Edit -->
                    <th class="text-nowrap pe-2 text-center">Edit</th>
                    
                    <!-- Delete -->
                    <th class="text-nowrap pe-2 text-center">Delete</th>

                </tr>
            </thead>
            <tbody id="assetsTableBodyPlaceholder">
                @{
                    int i = 0;
                }
                @foreach (var asset in Model.Assets)
                {
                    <tr class="@(i % 2 == 0 ? "row-even" : "row-odd")">

                        <!-- Contact -->
                        <td class="text-nowrap">@(asset.BillingContactFullName)@(!string.IsNullOrEmpty(asset.BillingContactEmail) ? $" ({asset.BillingContactEmail})" : "")</td>
                        
                        <!-- Plot ID -->
                        <td class="text-nowrap py-2 ps-2">@asset.PlotID</td>

                        <!-- Assessment Fee -->
                        <td class="text-nowrap text-end">@asset.AssessmentFee.ToString("C")</td>
                        
                        <!-- Description -->
                        <td class="text-nowrap">@asset.Description</td>

                        <!-- Created -->
                        <td class="text-nowrap">@asset.DateCreated.ToString("yyyy-MM-dd")</td>

                        <!-- Last Updated -->
                        <td class="text-nowrap">@asset.LastUpdated.ToString("yyyy-MM-dd")</td>

                        <!-- Billing Link -->
                        <td class="text-nowrap py-2 pe-2 text-center">
                            @if (!string.IsNullOrEmpty(asset.UserID))
                            {
                                <a asp-area="Member" asp-page="/MyBilling"
                                   asp-route-userId="@asset.UserID"
                                   asp-route-returnUrl="@Url.Page("./BillableAssets", new {
                                                            searchTerm = Model.SearchTerm,
                                                            pageNumber = Model.PageNumber,
                                                            currentSort = Model.CurrentSort,
                                                            pageSize = Model.PageSize
                                                        })"
                                   class="btn btn-sm btn-billing" title="View Billing for @asset.BillingContactFullName">
                                    <i class="bi bi-file-earmark-text"></i>
                                </a>
                            }
                            else
                            {
                                <button type="button" class="btn btn-sm btn-secondary" disabled title="No billing contact assigned">
                                    <i class="bi bi-file-earmark-text"></i>
                                </button>
                            }
                        </td>

                        <!-- Edit Asset -->
                        <td class="text-nowrap py-2 pe-2 text-center">
                            <button type="button" class="btn btn-sm btn-rename edit-asset-button me-1" data-asset-id="@asset.BillableAssetID" data-plot-id="@asset.PlotID" title="Edit Asset @asset.PlotID"><i class="bi bi-pencil-square"></i></button>
                        </td>

                        <!-- Delete Asset -->
                        <td class="text-nowrap py-2 pe-2 text-center">
                            <form method="post" asp-page-handler="DeleteAsset" asp-route-assetId="@asset.BillableAssetID" style="display: inline;"><button type="submit" class="btn btn-sm btn-delete" title="Delete Asset: @asset.PlotID" onclick="return confirm('Are you sure you want to delete Billable Asset \'@asset.PlotID.Replace("'", "\'")\' (ID: @asset.BillableAssetID)? This action cannot be undone.');"><i class="bi bi-trash"></i></button></form>
                        </td>

                    </tr>
                    i++;
                }
            </tbody>
        </table>
    </div>

    <!-- Paginator -->
    <div id="assetsPaginationPlaceholder" class="mt-3 px-1">
        @if (Model.TotalPages > 1)
        {
            <nav aria-label="Assets pagination">
                <ul class="pagination justify-content-center">
                    @{
                        var prevDisabled = Model.PageNumber <= 1 ? "disabled" : "";
                        var nextDisabled = Model.PageNumber >= Model.TotalPages ? "disabled" : "";
                        const int pageDisplayLimit = 5;
                        var startPage = Math.Max(1, Model.PageNumber - (int)Math.Floor((double)pageDisplayLimit / 2));
                        var endPage = Math.Min(Model.TotalPages, startPage + pageDisplayLimit - 1);
                        if (endPage - startPage + 1 < pageDisplayLimit && startPage > 1) { startPage = Math.Max(1, endPage - pageDisplayLimit + 1); }
                    }
                    <li class="page-item @prevDisabled"><a class="page-link assets-page-link" href="#" data-page-number="@(Model.PageNumber - 1)">&laquo;</a></li>
                    @for (var p = startPage; p <= endPage; p++)
                    {
                        <li class="page-item @(p == Model.PageNumber ? "active" : "")"><a class="page-link assets-page-link" href="#" data-page-number="@p">@p</a></li>
                    }
                    <li class="page-item @nextDisabled"><a class="page-link assets-page-link" href="#" data-page-number="@(Model.PageNumber + 1)">&raquo;</a></li>
                </ul>
            </nav>
        }
    </div>

    <!-- Ajax Response Container -->
    <div id="assetsTableAjaxResponseContainer" style="display:none;"></div>

</div>

<!-- Add Asset Modal -->
<div class="modal fade" id="addAssetModal" tabindex="-1" aria-labelledby="addAssetModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form method="post" asp-page-handler="AddAsset">
                <div class="modal-header">
                    <h5 class="modal-title" id="addAssetModalLabel"><i class="bi bi-plus-square"></i> Add A New Billable Asset</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
                    <div class="row g-3 mb-3">
                        <div class="col-md-6">
                            <label asp-for="NewAssetInput.PlotID" class="fw-bold ms-2"></label>
                            <input asp-for="NewAssetInput.PlotID" class="form-control shadow" />
                            <span asp-validation-for="NewAssetInput.PlotID" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="NewAssetInput.AssessmentFee" class="fw-bold ms-2"></label>
                            <input asp-for="NewAssetInput.AssessmentFee" type="number" step="0.01" class="form-control shadow" placeholder="0.00" />
                            <span asp-validation-for="NewAssetInput.AssessmentFee" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label asp-for="NewAssetInput.SelectedUserID" class="fw-bold ms-2"></label>
                            <select asp-for="NewAssetInput.SelectedUserID" asp-items="Model.BillingContactUsersSL" class="form-select shadow">
                                <option value="">-- Select Billing Contact --</option>
                            </select>
                            <span asp-validation-for="NewAssetInput.SelectedUserID" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="NewAssetInput.Description" class="fw-bold ms-2"></label>
                            <input asp-for="NewAssetInput.Description" class="form-control shadow" />
                            <span asp-validation-for="NewAssetInput.Description" class="text-danger"></span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-sm btn-secondary rounded-2 shadow" data-bs-dismiss="modal"><i class="bi bi-arrow-left"></i> Cancel</button>
                    <button type="submit" class="btn btn-sm btn-success rounded-2 shadow"><i class="bi bi-plus-square"></i> Add Asset</button>
                </div>
            </form>
        </div>
    </div>
</div> <!-- End of addAssetModal -->

<!-- Edit Asset Modal -->
<div class="modal fade" id="editAssetModal" tabindex="-1" aria-labelledby="editAssetModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form method="post" asp-page-handler="UpdateAsset">
                <div class="modal-header">
                    <h5 class="modal-title" id="editAssetModalLabel"><i class="bi bi-box-pencil"></i> Edit Billable Asset</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
                    <input type="hidden" asp-for="EditInput.BillableAssetID" />

                    <div class="row g-3 mb-3">
                        <div class="col-md-6">
                            <label asp-for="EditInput.PlotID" class="fw-bold ms-2"></label>
                            <input asp-for="EditInput.PlotID" class="form-control shadow" />
                            <span asp-validation-for="EditInput.PlotID" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="EditInput.AssessmentFee" class="fw-bold ms-2"></label>
                            <input asp-for="EditInput.AssessmentFee" type="number" step="0.01" class="form-control shadow" placeholder="0.00" />
                            <span asp-validation-for="EditInput.AssessmentFee" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label asp-for="EditInput.SelectedUserID" class="fw-bold ms-2"></label>
                            <select asp-for="EditInput.SelectedUserID" asp-items="Model.BillingContactUsersSL" class="form-select shadow">
                                <option value="">-- Unassign / Select Contact --</option>
                            </select>
                            <span asp-validation-for="EditInput.SelectedUserID" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="EditInput.Description" class="fw-bold ms-2"></label>
                            <input asp-for="EditInput.Description" class="form-control shadow" />
                            <span asp-validation-for="EditInput.Description" class="text-danger"></span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-sm btn-secondary rounded-2 shadow" data-bs-dismiss="modal"><i class="bi bi-arrow-left"></i> Cancel</button>
                    <button type="submit" class="btn btn-sm btn-success rounded-2 shadow"><i class="bi bi-save"></i> Update Asset</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Export Confirmation Modal for Billable Assets -->
<div class="modal fade" id="exportBillableAssetsConfirmModal" tabindex="-1" aria-labelledby="exportBillableAssetsConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
           <div class="modal-header">
                <h5 class="modal-title" id="exportBillableAssetsConfirmModalLabel">Confirm Export</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Download the CSV export for all Billable Assets?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-sm btn-secondary shadow" data-bs-dismiss="modal"><i class="bi bi-arrow-left"></i> Cancel</button>
                <button type="button" class="btn btn-sm btn-success shadow" id="confirmBillableAssetsExportButton"><i class="bi bi-save"></i> Yes, Export</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Common elements
            var addNewAssetButton = $('button[data-bs-target="#addAssetModal"]');

            // Add Asset Modal
            var addAssetModalElement = document.getElementById('addAssetModal');
            var addAssetModal = null;
            if (addAssetModalElement) {
                addAssetModal = new bootstrap.Modal(addAssetModalElement);
            }

            // Edit Asset Modal
            var editAssetModalElement = document.getElementById('editAssetModal');
            var editAssetModal = null;
            if (editAssetModalElement) {
                editAssetModal = new bootstrap.Modal(editAssetModalElement);
            }

            // Modal Exclusivity & Cleanup
            if (addAssetModalElement) {
                addAssetModalElement.addEventListener('show.bs.modal', function () {
                    if (editAssetModalElement && editAssetModalElement.classList.contains('show')) {
                        editAssetModal.hide();
                    }
                });

                addAssetModalElement.addEventListener('hidden.bs.modal', function() {
                    // This logic ensures that if no modals are open, the Add button is enabled.
                    if (!(editAssetModalElement && editAssetModalElement.classList.contains('show'))) {
                         if (addNewAssetButton.length > 0) {
                            addNewAssetButton.prop('disabled', false).removeAttr('title');
                        }
                    }
                     // Clear Add Asset modal form fields
                    $('#addAssetModal #NewAssetInput_PlotID').val('');
                    $('#addAssetModal #NewAssetInput_AssessmentFee').val('');
                    $('#addAssetModal #NewAssetInput_SelectedUserID').val('');
                    $('#addAssetModal #NewAssetInput_Description').val('');
                    // Clear validation messages
                    $('#addAssetModal .text-danger').text('');
                    $('#addAssetModal .is-invalid').removeClass('is-invalid');
                });
            }

            if (editAssetModalElement) {
                editAssetModalElement.addEventListener('show.bs.modal', function () {
                    if (addAssetModalElement && addAssetModalElement.classList.contains('show')) {
                        addAssetModal.hide();
                    }
                    // Disable the main "Add a New Billable Asset" button
                    if (addNewAssetButton.length > 0) {
                        addNewAssetButton.prop('disabled', true).attr('title', 'Close the Edit Asset modal before adding a new asset.');
                    }
                });

                editAssetModalElement.addEventListener('hidden.bs.modal', function () {
                    // Re-enable the "Add a New Billable Asset" button when edit modal is closed
                    if (addNewAssetButton.length > 0) {
                        addNewAssetButton.prop('disabled', false).removeAttr('title');
                    }
                    // Clear form fields in edit modal after closing to prevent stale data on reopen for a different item
                    $('#editAssetModal #EditInput_BillableAssetID').val('');
                    $('#editAssetModal #EditInput_PlotID').val('');
                    $('#editAssetModal #EditInput_AssessmentFee').val('');
                    $('#editAssetModal #EditInput_SelectedUserID').val(''); // Reset dropdown
                    $('#editAssetModal #EditInput_Description').val('');
                    $('#editAssetModalLabel').text('Edit Billable Asset'); // Reset title
                    // Clear validation messages if any (more complex, might need a generic approach)
                     $('#editAssetModal .text-danger').text(''); // Clears all validation spans within edit modal
                     $('#editAssetModal .is-invalid').removeClass('is-invalid'); // Clears is-invalid classes
                });
            }

            // Define debounce if not already defined from previous scripts for modals
            if (typeof debounce !== 'function') {
                function debounce(func, delay) {
                    let timeoutId;
                    return function(...args) {
                        clearTimeout(timeoutId);
                        timeoutId = setTimeout(() => {
                            func.apply(this, args);
                        }, delay);
                    };
                }
            }

           // Variables for Search and Pagination
           const assetsSearchInput = $('#assetsSearchInput');
           const clearAssetsSearch = $('#clearAssetsSearch');
           const filterAssetsForm = $('#filterAssetsForm');
           const assetCountSpan = $('#assetCountSpan');

           const assetsTableBodyPlaceholder = $('#assetsTableBodyPlaceholder');
           const assetsPaginationPlaceholder = $('#assetsPaginationPlaceholder');
           const assetsTableAjaxResponseContainer = $('#assetsTableAjaxResponseContainer');

           function updateAssetsTableAjax() {
               const searchTerm = assetsSearchInput.val();
               const pageNumber = $('input[name="PageNumber"]').val();
               const pageSize = $('input[name="PageSize"]').val() || 20;
               const currentSort = $('input[name="CurrentSort"]').val();

               assetsTableBodyPlaceholder.html('<tr><td colspan="8" class="p-3 text-center">Loading...</td></tr>');
               assetsPaginationPlaceholder.html('');

               $.ajax({
                   url: '?handler=PartialTable',
                   type: 'GET',
                   data: {
                       searchTerm: searchTerm,
                       pageNumber: pageNumber,
                       pageSize: pageSize,
                       currentSort: currentSort
                   },
                   success: function(response) {
                       console.log('[RAW RESPONSE]', response);

                       // ---- START DOMParser / jQuery Fallback Test ----
                       let paginationControlsHtmlFromDirectParse = undefined;
                       let paginationControlsOuterHtmlFromDirectParse = undefined;
                       let foundLengthFromDirectParse = 0;

                       try {
                           const parser = new DOMParser();
                           const doc = parser.parseFromString(response, "text/html");
                           const foundElement = doc.getElementById("assetsPaginationControls");

                           if (foundElement) {
                               foundLengthFromDirectParse = 1;
                               paginationControlsHtmlFromDirectParse = foundElement.innerHTML;
                               paginationControlsOuterHtmlFromDirectParse = foundElement.outerHTML;
                               console.log('[DEBUG] DOMParser found #assetsPaginationControls:', foundElement);
                           } else {
                               console.log('[DEBUG] DOMParser DID NOT find #assetsPaginationControls. Trying jQuery on temp container...');
                               // Fallback to jQuery on temp container
                               const tempContainer = $('<div>').html(response);
                               const jqFound = tempContainer.find('#assetsPaginationControls');
                               if (jqFound.length) {
                                   foundLengthFromDirectParse = jqFound.length;
                                   paginationControlsHtmlFromDirectParse = jqFound.first().html();
                                   paginationControlsOuterHtmlFromDirectParse = jqFound.first()[0].outerHTML;
                                   console.log('[DEBUG] Fallback jQuery on temp container found #assetsPaginationControls:', jqFound);
                               } else {
                                   console.log('[DEBUG] Fallback jQuery on temp container ALSO DID NOT find #assetsPaginationControls.');
                               }
                           }
                       } catch (e) {
                           console.error('[DEBUG] Error during DOMParser or fallback jQuery processing of response string:', e);
                       }

                       console.log('[DEBUG] Length found from direct parse (DOMParser/jQuery fallback):', foundLengthFromDirectParse);
                       if (foundLengthFromDirectParse > 0) {
                           console.log('[DEBUG] HTML from direct parse:', paginationControlsHtmlFromDirectParse);
                           console.log('[DEBUG] outerHTML from direct parse:', paginationControlsOuterHtmlFromDirectParse);
                       }
                       // ---- END DOMParser / jQuery Fallback Test ----

                       assetsTableAjaxResponseContainer.html(response);

                       const newTbodyContent = assetsTableAjaxResponseContainer.find('#assetsTableBody').html();
                       assetsTableBodyPlaceholder.html(newTbodyContent || '<tr><td colspan="8" class="p-3 text-center">No assets found matching your criteria.</td></tr>');

                       // ---- START 기존 DEBUGGING PAGINATION (assetsTableAjaxResponseContainer.find) ----
                       const paginationControlsSource = assetsTableAjaxResponseContainer.find('#assetsPaginationControls');
                       console.log('[DEBUG] (Original Check) Pagination Source Element in AJAX response after .html():', paginationControlsSource);
                       if (paginationControlsSource.length) {
                           console.log('[DEBUG] (Original Check) Pagination Source HTML (first element):', paginationControlsSource.first().html());
                           console.log('[DEBUG] (Original Check) Pagination Source outerHTML (first element):', paginationControlsSource.first()[0].outerHTML);
                       } else {
                           console.log('[DEBUG] (Original Check) #assetsPaginationControls NOT FOUND in AJAX response after .html().');
                       }

                       // THE KEY CHANGE IS HERE:
                       const newPaginationContent = paginationControlsHtmlFromDirectParse; // USE THE DOMPARSER RESULT
                       console.log('[DEBUG] Using newPaginationContent from DOMParser/fallback:', newPaginationContent); // Added log for clarity

                       assetsPaginationPlaceholder.html(newPaginationContent || '');
                       console.log('[DEBUG] (Original Check) assetsPaginationPlaceholder HTML after update:', assetsPaginationPlaceholder.html());
                       // ---- END 기존 DEBUGGING PAGINATION ----

                       const totalAssetsFromPartial = assetsTableAjaxResponseContainer.find('#partialTotalAssets').val();
                       if (totalAssetsFromPartial) {
                           assetCountSpan.text('Total Assets: ' + totalAssetsFromPartial);
                       }
                       $('input[name="PageNumber"]').val(assetsTableAjaxResponseContainer.find('#partialPageNumber').val());

                       attachEditAssetButtonListeners_Assets();
                       attachAssetsPaginationListeners();
                       updateAssetsSortIndicators($('input[name="CurrentSort"]').val());
                   },
                   error: function(xhr, status, error) {
                       console.error("Error updating assets table:", error, xhr.responseText);
                       assetsTableBodyPlaceholder.html('<tr><td colspan="8" class="text-danger p-3 text-center">Error loading data. Please try again.</td></tr>');
                   }
               });
           }

           function attachAssetsPaginationListeners() {
               assetsPaginationPlaceholder.find('.assets-page-link').off('click').on('click', function(e) {
                   e.preventDefault();
                   $('input[name="PageNumber"]').val($(this).data('page-number'));
                   updateAssetsTableAjax();
               });
           }

           function attachAssetsSortLinkListeners() {
               $('#mainAssetsTable thead .asset-sort-link').off('click').on('click', function(e) {
                   e.preventDefault();
                   const baseColumnKey = $(this).data('column-key'); // e.g., "plotid", from data-column-key
                   const currentSortHiddenInput = $('input[name="CurrentSort"]');
                   const currentFullSort = currentSortHiddenInput.val(); // e.g., "plotid_asc" or "contact_desc"

                   let newSortValue;
                   if (currentFullSort === baseColumnKey + "_asc") {
                       newSortValue = baseColumnKey + "_desc";
                   } else if (currentFullSort === baseColumnKey + "_desc") {
                       // If current sort is already descending for this column, toggle to ascending
                       newSortValue = baseColumnKey + "_asc";
                   }
                   else {
                       // If it's a new column being clicked, or if current sort is not set for this column, default to ascending
                       newSortValue = baseColumnKey + "_asc";
                   }

                   currentSortHiddenInput.val(newSortValue);
                   $('input[name="PageNumber"]').val(1); // Reset to page 1 on sort
                   updateAssetsTableAjax();
               });
           }

           function updateAssetsSortIndicators(currentSortActual) {
                $('#mainAssetsTable thead th .bi').remove();
                $('#mainAssetsTable thead .asset-sort-link').each(function() {
                    const sortLink = $(this);
                    const columnKey = sortLink.data('column-key');
                    if (!columnKey) return;

                    let iconHtml = '';
                    if (currentSortActual === columnKey + '_asc') {
                        iconHtml = '<i class="bi bi-arrow-down ms-1"></i>';
                    } else if (currentSortActual === columnKey + '_desc') {
                        iconHtml = '<i class="bi bi-arrow-up ms-1"></i>';
                    }

                    if (iconHtml) {
                        sortLink.after(iconHtml);
                    }
                });
            }

           assetsSearchInput.on('input', debounce(function() {
               $('input[name="PageNumber"]').val(1);
               updateAssetsTableAjax();
               clearAssetsSearch.toggle(!!assetsSearchInput.val());
           }, 500));

           clearAssetsSearch.on('click', function() {
               assetsSearchInput.val('');
               $('input[name="PageNumber"]').val(1);
               updateAssetsTableAjax();
               clearAssetsSearch.hide();
           });

           filterAssetsForm.on('submit', function(e) {
               e.preventDefault();
               $('input[name="PageNumber"]').val(1);
               updateAssetsTableAjax();
           });

           function attachEditAssetButtonListeners_Assets() {
                assetsTableBodyPlaceholder.find('.edit-asset-button').off('click').on('click', function () {
                    var assetId = $(this).data('asset-id');
                    var plotId = $(this).data('plot-id');
                    var addAssetModalElement = document.getElementById('addAssetModal');
                    var addAssetModalInstance = addAssetModalElement ? bootstrap.Modal.getInstance(addAssetModalElement) : null;
                    var editAssetModalElement = document.getElementById('editAssetModal');
                    var editAssetModalInstance = editAssetModalElement ? bootstrap.Modal.getInstance(editAssetModalElement) : null;

                    if (addAssetModalInstance && addAssetModalElement && addAssetModalElement.classList.contains('show')) {
                        addAssetModalInstance.hide();
                    }
                    var url = `${window.location.pathname}?handler=ShowEditForm&assetId=${assetId}`;
                    $.ajax({
                        url: url, type: 'GET',
                        success: function (data) {
                            if (data) {
                                $('#editAssetModal #EditInput_BillableAssetID').val(data.billableAssetID);
                                $('#editAssetModal #EditInput_PlotID').val(data.plotID);
                                $('#editAssetModal #EditInput_AssessmentFee').val(data.assessmentFee.toFixed(2));
                                $('#editAssetModal #EditInput_SelectedUserID').val(data.selectedUserID);
                                $('#editAssetModal #EditInput_Description').val(data.description);
                                $('#editAssetModalLabel').text('Edit Billable Asset: ' + plotId);
                                if(editAssetModalInstance) editAssetModalInstance.show();
                            } else { alert('Error: Could not retrieve asset data.'); }
                        },
                        error: function (jqXHR) {
                            console.error("AJAX error fetching asset for edit: ", jqXHR.responseText);
                            alert('Error loading asset data for editing. ' + (jqXHR.responseJSON ? jqXHR.responseJSON.message : 'Check console.'));
                        }
                    });
                });
            }

           // Initial setup on page load
           // $(document).ready(function() { // This is already inside a document.ready, so no need to nest.
               clearAssetsSearch.toggle(!!assetsSearchInput.val());
               attachAssetsSortLinkListeners();
               updateAssetsSortIndicators($('input[name="CurrentSort"]').val());
               attachEditAssetButtonListeners_Assets();
               attachAssetsPaginationListeners();
           // });

            // --- Export CSV Modal Logic for BillableAssets ---
            const confirmManageAssetsExportButton = document.getElementById('confirmBillableAssetsExportButton');
            const exportBillableAssetsModalElement = document.getElementById('exportBillableAssetsConfirmModal');
            const exportBillableAssetsTriggerButton = document.getElementById('exportBillableAssetsTriggerButton'); // Assuming this ID was added

            if (confirmManageAssetsExportButton && exportBillableAssetsModalElement && exportBillableAssetsTriggerButton) {
                confirmManageAssetsExportButton.addEventListener('click', function () {
                    const exportUrl = `@Url.Page("./BillableAssets", "ExportCsv")`;
                    window.location.href = exportUrl;

                    var modalInstance = bootstrap.Modal.getInstance(exportBillableAssetsModalElement);
                    if (modalInstance) {
                        modalInstance.hide();
                    }
                    // Focus and inert handled by modal events
                });

                exportBillableAssetsModalElement.addEventListener('show.bs.modal', function () {
                    exportBillableAssetsModalElement.inert = false;
                });

                exportBillableAssetsModalElement.addEventListener('hide.bs.modal', function () {
                    exportBillableAssetsModalElement.inert = true;
                });

                exportBillableAssetsModalElement.addEventListener('hidden.bs.modal', function () {
                    if (exportBillableAssetsTriggerButton && typeof exportBillableAssetsTriggerButton.focus === 'function') {
                        exportBillableAssetsTriggerButton.focus();
                    }
                    exportBillableAssetsModalElement.inert = false;
                });
            }
            // --- End Export CSV Modal Logic ---
        });
    </script>
}
