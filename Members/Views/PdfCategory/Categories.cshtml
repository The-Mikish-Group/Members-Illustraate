@model IEnumerable<Members.Models.PDFCategory>

@{
    ViewData["Title"] = "Manage Categories";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Title -->
<div class="text-black mb-2 mt-4 text-center">
    <h3><i class="bi bi-list-ul ms-2"></i> @ViewData["Title"]</h3>
</div>

<!-- Row and Column -->
<div class="my-4 m-0 p-0">
    <div class="row justify-content-center m-1 p-0">
        <div class="col-md-8 col-lg-6 m-0 p-0">

            <!-- Status Messsage -->
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert-success alert-dismissible fade show my-2" role="alert">@TempData["SuccessMessage"]<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>
            }
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert-danger alert-dismissible fade show my-2" role="alert">@TempData["ErrorMessage"]<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>
            }

            <!-- Card with Shadow -->
            <div class="card rounded shadow p-2">

                <!-- Heading: Add a New Category -->
                <div class="mb-2 ms-2 text-start">
                    <h5 class="text-black"><i class="bi bi-plus-square-fill me-2"></i> Add a New Category</h5>
                </div>

                <!-- Create Category form -->
                <form id="addCategoryForm" method="post" asp-controller="PdfCategory" asp-action="CreateCategory">
               
                    @Html.AntiForgeryToken()
                
                    <div class="row mx-0">

                        <!-- New Category Name -->
                        <div class="col-8 px-0">
                            <label for="newCategoryName" class="form-label visually-hidden">Category Name</label>
                            <input type="text" class="form-control no-right-radius" id="newCategoryName" name="CategoryName" placeholder="Category Name" required>
                        </div>

                        <!-- Sort Order -->
                        <div class="col-2 px-0">
                            <label for="newSortOrder" class="form-label visually-hidden">Sort Order</label>
                            <input type="number" class="form-control rounded-0" id="newSortOrder" name="SortOrder" value="@ViewBag.NextSortOrder" min="1">
                        </div>

                        <!-- Add Button -->
                        <div class="col-2 px-0">
                            <button type="submit" class="btn btn-success no-left-radius w-100"><i class="bi bi-upload"></i></button>
                        </div>

                    </div>

                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="text-danger small mt-2 py-1">
                            @Html.ValidationSummary(false, "", new { @class = "list-unstyled" })
                        </div>
                    }

                </form>
            
            </div>

        </div>
    </div>
</div>

<!-- Category Table -->
<div class="my-4 m-0 p-0">
    <div class="row justify-content-center m-1 p-0">
        <div class="col-md-8 col-lg-6 m-0 p-0">

            <!-- Shadowed Card -->
            <div class="card rounded shadow p-2">
            
                <!-- Edit Existing Categories Heading -->
                <div class="mb-3 ms-2 text-start">
                    <h5 class="text-black"><i class="bi bi-pencil-fill me-2"></i> Edit Existing Categories</h5>
                </div>
               
                @if (Model != null && Model.Any())
                {
                    <!-- Table -->
                    <div class="table-responsive rounded shadow">
                        <table class="table-striped w-100 shadow">

                            <!-- Table Head -->
                            <thead>
                                <tr>
                                    <th class="header-text ps-2 text-white">Rename</th>
                                    <th class="header-text text-white">Category</th>
                                    <th class="header-text text-center text-white">Sort</th>
                                    <th class="header-text text-end text-white pe-2">Delete</th>
                                </tr>
                            </thead>

                            <!-- Table Body -->
                            <tbody id="manageCategoriesTableBody">
                                @foreach (var item in Model)
                                {
                                    <!-- Table Row -->                                       
                                    <tr data-category-id="@item.CategoryID"                                        
                                    data-category-name="@item.CategoryName"
                                    data-sort-order="@item.SortOrder" 
                                    id="display-row-@item.CategoryID">

                                        <!-- Edit Button -->
                                        <td class="edit-cell py-0">                                       
                                            <button type="button" class="btn btn-sm btn-link btn-rename mt-1"
                                                    data-bs-toggle="modal" 
                                                    data-bs-target="#renameModal"
                                                    onclick="showRenameCategoryModal('@item.CategoryID', '@item.CategoryName', '@item.SortOrder')">
                                                <i class="bi bi-pencil-square"></i>
                                            </button>
                                        </td>

                                        <!-- Category Name -->
                                        <td class="category-name-cell" 
                                            style="cursor: pointer;"
                                            onclick="showRenameCategoryModal('@item.CategoryID', '@item.CategoryName', '@item.SortOrder')">
                                            @item.CategoryName
                                        </td>

                                        <!-- Sort Order -->                                        
                                        <td class="text-black text-center">@item.SortOrder</td>

                                        <!-- Delete Button -->
                                        <td class="delete-cell py-0 text-end">
                                            <form method="post" 
                                                class="d-inline d-flex justify-content-end w-100" 
                                                action="/PdfCategory/DeleteCategoryConfirmed/@item.CategoryID">
                                                
                                                <button type="submit" 
                                                    class="btn btn-sm btn-delete delete-button px-2 py-2" 
                                                    onclick="return confirm('Are you sure you want to delete the category: @item.CategoryName?');">
                                                    <i class="bi bi-trash-fill"></i>
                                                </button>
                                            
                                            </form>
                                        </td>

                                    </tr>                               
                                }

                            </tbody>

                        </table>
                    </div>
                }
                else
                {                    
                    <div class="text-black mt-2 text-center">
                        No categories found.
                    </div>
                }
           
            </div>       

            <!-- Button(s) -->
            <div class="row justify-content-center mx-auto p-0">
            <div class="col-md-8 bg-transparent pe-2 pt-2">
                <div class="d-flex justify-content-center mb-3">

                    <!-- Manage Categories -->
                    <a class="btn btn-sm btn-outline-info rounded-2 shadow"
                       href="/PdfCategory/ManageCategoryFiles" 
                        title="Edit PDF Category Files">
                        <span><i class="bi bi-folder-symlink"></i> Manage</span><br /><span class="text-nowrap">Category Files</span>                    
                    </a>

                </div>
            </div>
        </div>
        </div>
    </div>
</div>

<!-- Edit Modal for Confidential Categories -->
<div class="modal fade" 
    id="renameModal" 
    tabindex="-1" 
    aria-labelledby="renameModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Head -->
            <div class="modal-header">
                <h5 class="modal-title" id="renameModalLabel">Edit Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <!-- Modal Body -->
            <div class="modal-body pb-0">
                
                <input type="hidden" 
                    id="renameCategoryId" 
                    name="renameCategoryId" />
                
                <!-- New Category Name -->
                <div class="row align-items-center mb-2">

                    <!-- New Name Label -->
                    <div class="col-3"> 
                        <label for="newCategoryName" class="col-form-label fw-bold">New Name:</label>
                    </div>

                    <!-- New Name -->
                    <div class="col-9"> 
                        <input type="text" 
                            class="form-control" 
                            id="newCategoryName" 
                            name="newCategoryName" />
                    </div>

                </div>

                <!-- New Sort Order -->
                <div class="row align-items-center mb-1">
                     <div class="col-3">
                        <label for="newSortOrder" class="col-form-label fw-bold">Sort Order:</label>
                     </div>
                     <div class="col-9">
                        <input type="number" 
                                class="form-control" 
                                id="newSortOrderInput" 
                                name="newSortOrder" 
                                min="1">
                     </div>
                </div>

            </div>
            
            <!-- Modal Footer -->
            <div class="modal-footer">

                <!-- Cancel Button -->
                <button type="button" 
                        class="btn btn-sm btn-secondary rounded-2 shadow"
                        data-bs-dismiss="modal">
                    <i class="bi bi-box-arrow-left"></i> Cancel
                </button>

                <!-- Save Button -->
                <button type="button" 
                        class="btn btn-sm btn-success rounded-2 shadow" 
                        onclick="submitCategoryRenameForm()">
                    <i class="bi bi-save-fill"></i> Save Changes
                </button>

            </div>

        </div>
    </div> 
</div>

@section Scripts {
    <script>
        // --- Standalone Helper Functions (Global Scope) ---
        // These functions are called directly from HTML onclick attributes,
        // so they MUST be in the global scope.

        // Function to populate and show the rename category modal
        function showRenameCategoryModal(categoryId, categoryName, sortOrder) {
            
            // Populate modal inputs with data from the clicked category row
            document.getElementById('renameCategoryId').value = categoryId;
            document.getElementById('newCategoryName').value = categoryName;
            document.getElementById('newSortOrderInput').value = sortOrder;

            // Ensure the sort order input allows 0 or more (or 1 if you prefer)
            document.getElementById('newSortOrderInput').setAttribute('min', '0');


            // Initialize and show the Bootstrap modal
            var renameModal = new bootstrap.Modal(document.getElementById('renameModal'));
            renameModal.show();
        }

        // Function to handle the category rename/sort order update form submission via Fetch API
        // This function is called from the onclick of the modal's "Save Changes" button.
        function submitCategoryRenameForm() {

            console.log('submitCategoryRenameForm called');

            // Get values from modal inputs
            var categoryId = document.getElementById('renameCategoryId').value;
            var newCategoryName = document.getElementById('newCategoryName').value;
            var newSortOrder = document.getElementById('newSortOrderInput').value;

            var url = '@Url.Action("EditMemberCategory", "PdfCategory")';

            if (!newCategoryName.trim()) { alert('Category name cannot be empty.'); return; }
            if (parseInt(newSortOrder) < 1) { alert('Sort order must be 1 or greater.'); return; }

            // Use FormData to easily collect and send data for the POST request
            var formData = new FormData();
            formData.append("CategoryID", categoryId); // Match parameter name expected by EditCategory action
            formData.append("CategoryName", newCategoryName); // Match parameter name expected by EditCategory action
            formData.append("SortOrder", newSortOrder); // Match parameter name expected by EditCategory action

            // Get the Request Verification Token for security against CSRF
            var token = $('input[name="__RequestVerificationToken"]').val();
            var headers = {};
            if (token) {
                 // For FormData, you might need to send the token in the header like this:
                headers['RequestVerificationToken'] = token;
                 // If EditCategory expects it in the body or cookie, adjust accordingly.
                 // Sending in the header is a common pattern with Fetch/FormData.
            }

            // Perform the asynchronous HTTP POST request using the Fetch API
            fetch(url, {
                method: 'POST',
                body: formData, // Send collected data. Fetch with FormData automatically sets Content-Type.
                headers: headers // Include the security token in headers
            })
            .then(response => {
                // Check if the response was successful (HTTP status 2xx)
                if (!response.ok) {
                     // If not successful, try to read an error message from the response body
                     return response.text().then(errorMessage => {
                         // Throw an error that will be caught by the .catch() block
                         throw new Error(errorMessage || 'Server returned an error.');
                     });
                }
                // If successful, read the response body as text (assuming it returns a message or redirects)
                // If your EditCategory action returns JSON, use response.json() instead.
                return response.text();
            })
            .then(message => {
                // Handle successful response
                console.log('Request successful:', message);
                // Reload the page to show the updated category list and order
                window.location.reload();

                // Alternatively, instead of reloading, you could hide the modal and update the table row directly
                // var renameModal = bootstrap.Modal.getInstance(document.getElementById('renameModal'));
                // renameModal.hide();
                // Find the table row $('#display-row-' + categoryId) and update its cells with newCategoryName and newSortOrder
            })
            .catch(error => {
                // Handle any errors during the fetch or from the server
                console.error('Fetch error:', error);
                // Display an error message to the user
                alert('An error occurred while updating the category: ' + error.message);

                // Optional: Close the modal on error
                // var renameModal = bootstrap.Modal.getInstance(document.getElementById('renameModal'));
                // renameModal.hide();
            });
        }


        // Function to apply alternating row colors to the table body
        function applyRowColors() {
             // Target all table rows within the tbody that represent display rows
             $('#manageCategoriesTableBody > tr[id^="display-row-"]:visible').each(function(index) {
                 $(this).removeClass('even-row odd-row'); // Remove existing classes
                 if (index % 2 === 0) {
                     $(this).addClass('even-row'); // Apply even row class
                 } else {
                     $(this).addClass('odd-row'); // Apply odd row class
                 }
             });
             // Ensure edit rows (which are now removed, but good practice if you add other hidden rows) don't interfere
             // $('#manageCategoriesTableBody > tr[id^="edit-row-"]').removeClass('even-row odd-row'); // This line is no longer strictly necessary as edit rows are removed
        }


        // --- Document Ready Block ---
        // This block runs once the entire DOM is loaded.
        // Use it for initial setup and attaching event listeners that don't use onclick attributes.
        $(document).ready(function() {

            // --- Initial Setup ---
            // Automatically apply colors to visible display rows on page load
            applyRowColors();

            // --- Event Listeners ---

            // Add event listener for the category name cell click to open the modal
            // Using event delegation on the tbody for performance and future-proofing
            $('#manageCategoriesTableBody').on('click', '.category-name-cell', function() {
                 var row = $(this).closest('tr'); // Find the parent table row
                 // Retrieve category data stored in data attributes on the table row
                 var categoryId = row.data('category-id');
                 var categoryName = row.data('category-name');
                 var sortOrder = row.data('sort-order');

                 // Call the global function to show the modal, passing the retrieved data
                 showRenameCategoryModal(categoryId, categoryName, sortOrder);
            });

             // Handle modal hidden event to remove the backdrop - Added this for consistency
             $('#renameModal').on('hidden.bs.modal', function () {
                  // Check if the modal backdrop element exists before trying to remove it
                  if ($('.modal-backdrop').length) {
                      $('.modal-backdrop').remove(); // Remove the backdrop to prevent scroll issues
                  }
             });

             // Remove the header text hiding logic as inline editing is removed
             // $('#EditHeader .header-text, #DeleteHeader .header-text').hide(); // Removed

        }); // <-- Closing tag for the document ready block

        

    </script>
}